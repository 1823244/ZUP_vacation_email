#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.3.4.71");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Рассылка уведомлений по отпускам'");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "1.1.1.0";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Открыть главную форму'");
	Команда.Идентификатор = "ОткрытьФормуОбработки";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Истина;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Разослать уведомления по графику отпусков (для настройки расписания)'");
	Команда.Идентификатор = "РазослатьУведомления";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ЗаполнитьДокументыДляРассылки() Экспорт

	ГрафикОтпусков.Очистить();	
	
	НачалоПериода 		= Период.ДатаНачала;
	ОкончаниеПериода 	= Период.ДатаОкончания;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ДокументПереноса
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.ДокументПланирования
		|	КОНЕЦ КАК ДокументПланированияОтпуска,
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаНачала
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.ДатаНачала
		|	КОНЕЦ КАК ДатаНачалаОтпуска,
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ДокументПереноса.ДатаОкончания
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончанияОтпуска,
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ДокументПереноса.КоличествоДней
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.КоличествоДней
		|	КОНЕЦ КАК КоличествоДнейОтпуска,
		|	ПлановыеЕжегодныеОтпуска.Сотрудник,
		|	ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформация.Представление, """") КАК АдресЭПСотрудника,
		|	ЕСТЬNULL(ПлановыеЕжегодныеОтпуска.Сотрудник.ФизическоеЛицо.ГруппаДоступа, ЗНАЧЕНИЕ(Справочник.ГруппыДоступаФизическихЛиц.ПустаяСсылка)) КАК ГруппаДоступаФизическогоЛица
		|ПОМЕСТИТЬ ВТплан
		|ИЗ
		|	РегистрСведений.ПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|		ПО ПлановыеЕжегодныеОтпуска.Сотрудник.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
		|			И (ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица))
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|				ТОГДА &УсловиеНаДатуНачала1 И &УсловиеНаДатуОкончания1
		|			ИНАЧЕ &УсловиеНаДатуНачала2 И &УсловиеНаДатуОкончания2
		|		КОНЕЦ
		|;   
		|
		|
		| 
		|
		|ВЫБРАТЬ
		|
		|	Док.Ссылка КАК ДокументПланированияОтпуска,
		|	Док.ДатаНачалаОсновногоОтпуска КАК ДатаНачалаОтпуска,
		|	Док.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончанияОтпуска,
		|	Док.КоличествоДнейОсновногоОтпуска КАК КоличествоДнейОтпуска,
		|	Док.Сотрудник,
		|	ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформация.Представление, """") КАК АдресЭПСотрудника,
		|	ЕСТЬNULL(Док.Сотрудник.ФизическоеЛицо.ГруппаДоступа, ЗНАЧЕНИЕ(Справочник.ГруппыДоступаФизическихЛиц.ПустаяСсылка)) КАК ГруппаДоступаФизическогоЛица		
		|ПОМЕСТИТЬ ВТфакт
		|ИЗ
		|	Документ.Отпуск КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|		ПО Док.Сотрудник.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
		|			И (ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица))
		|ГДЕ
		|	
		|	
		|	&УсловиеНаДатуНачала3 И &УсловиеНаДатуОкончания3
		|   И
		|   Док.Проведен = ИСТИНА
		|   И
		|	Док.ДатаНачалаОсновногоОтпуска <= &ДатаОтпусков
		|	И
		|	Док.ДатаНачалаОсновногоОтпуска >= &ТекДата
		|;
		|
		|ВЫБРАТЬ
		|
		|	ЕСТЬNULL(ВТфакт.ДокументПланированияОтпуска, 	ВТплан.ДокументПланированияОтпуска) КАК ДокументПланированияОтпуска,
		|	ЕСТЬNULL(ВТфакт.ДатаНачалаОтпуска,				ВТплан.ДатаНачалаОтпуска) КАК ДатаНачалаОтпуска,
		|	ЕСТЬNULL(ВТфакт.ДатаОкончанияОтпуска, 			ВТплан.ДатаОкончанияОтпуска) КАК ДатаОкончанияОтпуска,
		|	ЕСТЬNULL(ВТфакт.КоличествоДнейОтпуска, 			ВТплан.КоличествоДнейОтпуска) КАК КоличествоДнейОтпуска,
		|	ЕСТЬNULL(ВТфакт.Сотрудник,						ВТплан.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(ВТфакт.АдресЭПСотрудника, 				ВТплан.АдресЭПСотрудника) КАК АдресЭПСотрудника,
		|	ЕСТЬNULL(ВТфакт.ГруппаДоступаФизическогоЛица, 	ВТплан.ГруппаДоступаФизическогоЛица) КАК ГруппаДоступаФизическогоЛица
		|
		|ИЗ
		|	ВТфакт
		|	ПОЛНОЕ СОЕДИНЕНИЕ ВТплан
		|	ПО ВТплан.Сотрудник = ВТфакт.Сотрудник
		|
		|
		|";
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуНачала1", "ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаНачала >= &НачалоПериода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуНачала2", "ПлановыеЕжегодныеОтпуска.ДатаНачала >= &НачалоПериода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуНачала3", "Док.ДатаНачалаОсновногоОтпуска >= &НачалоПериода");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуНачала1", "Истина");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуНачала2", "Истина");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуНачала3", "Истина");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОкончаниеПериода) Тогда
		Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуОкончания1", "ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаНачала <= &ОкончаниеПериода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуОкончания2", "ПлановыеЕжегодныеОтпуска.ДатаНачала <= &ОкончаниеПериода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуОкончания3", "Док.ДатаНачалаОсновногоОтпуска <= &ОкончаниеПериода");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуОкончания1", "Истина");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуОкончания2", "Истина");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуОкончания3", "Истина");
	КонецЕсли;
	
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("РассылкаОтпусков_676924","СтруктураНастроек",,"Пользователь_676924");
	Если ТипЗнч(СтруктураНастроек)<>Тип("Структура") Тогда
		ГлубинаПроверки = 7;
	Иначе
		ГлубинаПроверки = СтруктураНастроек.ГлубинаПроверки;
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОтпусков",НачалоДня(ТекущаяДата())+86400*ГлубинаПроверки);
	Запрос.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ГрафикОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	МассивСотрудников = ГрафикОтпусков.ВыгрузитьКолонку("Сотрудник");
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина, 
		МассивСотрудников, 
		"ТекущаяОрганизация,ФизическоеЛицо,ДолжностьПоШтатномуРасписанию,ВидЗанятости,Должность,Подразделение,Фамилия,Имя,Отчество", 
		ТекущаяДата());
		
	Для каждого СтрГрафикОтпусков Из ГрафикОтпусков Цикл

		СтрКадровыеДанные = КадровыеДанные.Найти(СтрГрафикОтпусков.Сотрудник, "Сотрудник");
		Если СтрКадровыеДанные <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрГрафикОтпусков, СтрКадровыеДанные);
			СтрГрафикОтпусков.Организация = СтрКадровыеДанные.ТекущаяОрганизация;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ВыполнитьРассылку() Экспорт
	
	Если ГрафикОтпусков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ДобавляемыеПолучатели = Новый Массив;
	
	// получим адреса рассылки с закладки Настройки
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("РассылкаОтпусков_676924","СтруктураНастроек",,"Пользователь_676924");
	Если ТипЗнч(СтруктураНастроек)<>Тип("Структура") Тогда
		ВызватьИсключение "Не заданы emai-адреса для рассылки!";
	Иначе
		ТЗАдресов = СтруктураНастроек.ТЗАдресов;
		Если НЕ ЗначениеЗаполнено(СтруктураНастроек.Тема) Тогда
			ВызватьИсключение "Не задана тема письма!";
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из ТЗАдресов Цикл
		ДобавляемыеПолучатели.Добавить(Новый Структура("Адрес, Представление", Стр.email, Стр.ФИО));
	КонецЦикла;
		
	ИменаРеквизитовТабличнойЧасти = Новый Массив;
	РеквизитыТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[0].Реквизиты;
	Для Каждого РеквизитТабличнойЧасти Из РеквизитыТабличнойЧасти Цикл
		ИменаРеквизитовТабличнойЧасти.Добавить(РеквизитТабличнойЧасти.Имя);
	КонецЦикла;	
	
	ОбъектМетаданныхСправочникСотрудники = Метаданные.Справочники.Сотрудники;
	
	ТекстПисьма = "Автоматическая рассылка оповещения о приближающихся отпусках.
	|
	|Информируем вас, что через "+СтруктураНастроек.ГлубинаПроверки+" дней или ранее в отпуск уходят следующие сотрудники:
	|";
	
	//ТекстПисьма = "
	//|";
	Для Каждого СтрокаТаблицы Из ГрафикОтпусков Цикл
		
		ПараметрыТекстаПисьма = ЗаполняемыеПараметрыТекста(СтрокаТаблицы, ИменаРеквизитовТабличнойЧасти);

		Если ЗначениеЗаполнено(СтрокаТаблицы.АдресЭПСотрудника) Тогда
			ДобавляемыеПолучатели.Добавить(Новый Структура("Адрес, Представление", СтрокаТаблицы.АдресЭПСотрудника, ""));
		КонецЕсли;
		
		ТекстПисьма = ТекстПисьма + " - " + СтрокаТаблицы.Фамилия + " " + СтрокаТаблицы.Имя + " " + СтрокаТаблицы.Отчество + Символы.ПС; 
		ТекстПисьма = ТекстПисьма + "       " + "Период отпуска "+Формат(СтрокаТаблицы.ДатаНачалаОтпуска, "ДФ = дд.ММ.гггг")+" - "+Формат(СтрокаТаблицы.ДатаОкончанияОтпуска, "ДФ = дд.ММ.гггг") + Символы.ПС; 
		
	КонецЦикла;	
	
	ТекстПисьма = ТекстПисьма + "
	|"+Формат(ТекущаяДата(), "ДФ=дд.ММ.гггг");
	
	Тема = СтруктураНастроек.Тема;
	
	РезультатОтправкиСообщенияСотруднику = ВыполнитьОтправкуПисьма(ТекстПисьма, Тема, ДобавляемыеПолучатели, ПараметрыТекстаПисьма);
	
КонецПроцедуры


Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	ДатаЗавершенияВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах() + 4;
	
	ПараметрыРегистрации = СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Команды.Колонки.Идентификатор.Имя = "ИмяКоманды";
	ЭтаКоманда = ПараметрыРегистрации.Команды.Найти(ИмяКоманды, "ИмяКоманды");
	Если ЭтаКоманда = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Команда ""%1"" не поддерживается обработкой ""%2""'"),
			ИмяКоманды,
			Метаданные().Представление());
	КонецЕсли;
	
	Если ИмяКоманды = "РазослатьУведомления" Тогда
		ЗаполнитьДокументыДляРассылки();
		ВыполнитьРассылку();
	КонецЕсли;
	
	// Имитация длительной операции.
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < ДатаЗавершенияВМиллисекундах Цикл
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьОтправкуПисьма(Знач ТелоПисьма, Знач Тема, Получатели, ЗаменяемыеПараметрыТекстаПисьма = Неопределено)
	
	Результат = Новый Структура("Отправлено, ОписаниеОшибки", Ложь);

	ПараметрыПисьма = Новый Структура();
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Кодировка", "utf-8");
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	
	Если ЗначениеЗаполнено(ЗаменяемыеПараметрыТекстаПисьма) Тогда
		
		Для Каждого ЗаменяемыйПараметрТекста Из ЗаменяемыеПараметрыТекстаПисьма Цикл
			ТелоПисьма = СтрЗаменить(ТелоПисьма, ЗаменяемыйПараметрТекста.Имя, ЗаменяемыйПараметрТекста.Значение);
		КонецЦикла;	
		
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	ПараметрыПисьма.Вставить("Кому", Получатели);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
		Если МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем() Тогда
			УчетнаяЗапись = МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
			МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
			Результат.Отправлено = Истина;
		Иначе
			Результат.ОписаниеОшибки  = НСтр("ru = 'Сообщение не может быть отправлено сразу.'");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции	


Функция ЗаполняемыеПараметрыТекста(Знач СтрокаТабличнойЧасти, ИменаРеквизитовТабличнойЧасти)
	
	МассивВозврата = Новый Массив;
	
	Для Каждого ИмяРеквизита Из ИменаРеквизитовТабличнойЧасти Цикл
		
		ЗначениеСтрокиТаблицы = СтрокаТабличнойЧасти[ИмяРеквизита];
		
		Если ТипЗнч(ЗначениеСтрокиТаблицы) = Тип("Дата") Тогда
			ЗначениеСтрокиТаблицы = Формат(ЗначениеСтрокиТаблицы, "ДФ=dd.MM.yyyy");
		КонецЕсли;	
		
		ИмяРеквизитаДляТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("[%1]", ИмяРеквизита);
		
		МассивВозврата.Добавить(Новый Структура("Имя, Значение", ИмяРеквизитаДляТекста, ЗначениеСтрокиТаблицы));
		
	КонецЦикла;	
	
	Возврат МассивВозврата;
	
КонецФункции	



#КонецОбласти

#КонецЕсли