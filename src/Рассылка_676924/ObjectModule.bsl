#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.3.4.71");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Рассылка уведомлений по графику отпусков'");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "1.1.1.0";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Открыть обработку рассылка уведомлений по графику отпусков'");
	Команда.Идентификатор = "ОткрытьФормуОбработки";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Истина;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Разослать уведомления по графику отпусков (для настройки расписания)'");
	Команда.Идентификатор = "РазослатьУведомления";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ЗаполнитьДокументыДляРассылки() Экспорт

	ГрафикОтпусков.Очистить();	
	
	НачалоПериода 		= Период.ДатаНачала;
	ОкончаниеПериода 	= Период.ДатаОкончания;
	
	Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
		
		МакетНастроек = ПолучитьМакет("Настройки");
		КоличествоДней = Число(МакетНастроек.Область(1, 2).Текст);
		
		Если ЗначениеЗаполнено(КоличествоДней) Тогда
			НачалоПериода = НачалоДня(ТекущаяДата()+3600*24*КоличествоДней);
		Иначе
			НачалоПериода = НачалоДня(ТекущаяДата());
		КонецЕсли;	
		
		ОкончаниеПериода = НачалоПериода;

	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ДокументПереноса
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.ДокументПланирования
		|	КОНЕЦ КАК ДокументПланированияОтпуска,
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаНачала
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.ДатаНачала
		|	КОНЕЦ КАК ДатаНачалаОтпуска,
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ДокументПереноса.ДатаОкончания
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончанияОтпуска,
		|	ВЫБОР
		|		КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|			ТОГДА ПлановыеЕжегодныеОтпуска.ДокументПереноса.КоличествоДней
		|		ИНАЧЕ ПлановыеЕжегодныеОтпуска.КоличествоДней
		|	КОНЕЦ КАК КоличествоДнейОтпуска,
		|	ПлановыеЕжегодныеОтпуска.Сотрудник,
		|	ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформация.Представление, """") КАК АдресЭПСотрудника,
		|	ЕСТЬNULL(ПлановыеЕжегодныеОтпуска.Сотрудник.ФизическоеЛицо.ГруппаДоступа, ЗНАЧЕНИЕ(Справочник.ГруппыДоступаФизическихЛиц.ПустаяСсылка)) КАК ГруппаДоступаФизическогоЛица
		|ИЗ
		|	РегистрСведений.ПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|		ПО ПлановыеЕжегодныеОтпуска.Сотрудник.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
		|			И (ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица))
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ПлановыеЕжегодныеОтпуска.Перенесен
		|				ТОГДА ПлановыеЕжегодныеОтпуска.ПеренесеннаяДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИНАЧЕ ПлановыеЕжегодныеОтпуска.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|		КОНЕЦ";
		
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ГрафикОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	МассивСотрудников = ГрафикОтпусков.ВыгрузитьКолонку("Сотрудник");
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина, 
		МассивСотрудников, 
		"ТекущаяОрганизация,ФизическоеЛицо,ДолжностьПоШтатномуРасписанию,ВидЗанятости,Должность,Подразделение,Фамилия,Имя,Отчество", 
		ТекущаяДата());
		
	Для каждого СтрГрафикОтпусков Из ГрафикОтпусков Цикл

		СтрКадровыеДанные = КадровыеДанные.Найти(СтрГрафикОтпусков.Сотрудник, "Сотрудник");
		Если СтрКадровыеДанные <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрГрафикОтпусков, СтрКадровыеДанные);
			СтрГрафикОтпусков.Организация = СтрКадровыеДанные.ТекущаяОрганизация;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьРассылку() Экспорт
	
	Если ГрафикОтпусков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныСообщений.Ссылка
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	ШаблоныСообщений.Наименование = ""Сообщение о приближении отпуска по графику для сотрудника""
	|	И НЕ ШаблоныСообщений.ПометкаУдаления
	|	И ШаблоныСообщений.ПредназначенДляЭлектронныхПисем
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныСообщений.Ссылка
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	ШаблоныСообщений.Наименование = ""Сообщение о приближении отпуска по графику для оповещаемых об отпуске сотрудника""
	|	И НЕ ШаблоныСообщений.ПометкаУдаления
	|	И ШаблоныСообщений.ПредназначенДляЭлектронныхПисем";
		
	МассивРезультатов = Запрос.ВыполнитьПакет();

	РезультатЗапроса_ШаблонДляСотрудника = МассивРезультатов[0];
	ШаблонДляСотрудника = Неопределено;
	Если НЕ РезультатЗапроса_ШаблонДляСотрудника.Пустой() Тогда
		Выборка_ШаблонДляСотрудника = РезультатЗапроса_ШаблонДляСотрудника.Выбрать();
		Выборка_ШаблонДляСотрудника.Следующий();
		ШаблонДляСотрудника = Выборка_ШаблонДляСотрудника.Ссылка;
	КонецЕсли;	
	
	РезультатЗапроса_ШаблонДляОповещаемых = МассивРезультатов[1];
	ШаблонДляОповещаемых = Неопределено;
	Если НЕ РезультатЗапроса_ШаблонДляОповещаемых.Пустой() Тогда
		Выборка_ШаблонДляОповещаемых = РезультатЗапроса_ШаблонДляОповещаемых.Выбрать();
		Выборка_ШаблонДляОповещаемых.Следующий();
		ШаблонДляОповещаемых = Выборка_ШаблонДляОповещаемых.Ссылка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ШаблонДляСотрудника) И Не ЗначениеЗаполнено(ШаблонДляОповещаемых) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдены шаблоны для отправки сообщений!");
		Возврат;
	КонецЕсли;	
	
	ИменаРеквизитовТабличнойЧасти = Новый Массив;
	РеквизитыТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[0].Реквизиты;
	Для Каждого РеквизитТабличнойЧасти Из РеквизитыТабличнойЧасти Цикл
		ИменаРеквизитовТабличнойЧасти.Добавить(РеквизитТабличнойЧасти.Имя);
	КонецЦикла;	
	
	ОбъектМетаданныхСправочникСотрудники = Метаданные.Справочники.Сотрудники;
	
	Для Каждого СтрокаТаблицы Из ГрафикОтпусков Цикл
		
		ПараметрыТекстаПисьма = ЗаполняемыеПараметрыТекста(СтрокаТаблицы, ИменаРеквизитовТабличнойЧасти);

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.АдресЭПСотрудника) Тогда
			
			ТекстСообщения = "Не заполнено поле Email у сотрудника "+СтрокаТаблицы.Сотрудник;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Сотрудник);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданныхСправочникСотрудники, СтрокаТаблицы.Сотрудник);
			
		ИначеЕсли ЗначениеЗаполнено(ШаблонДляСотрудника) Тогда
			
			ДобавляемыеПолучатели = Новый Массив;
			ДобавляемыеПолучатели.Добавить(Новый Структура("Адрес, Представление", СтрокаТаблицы.АдресЭПСотрудника, ""));
			
			РезультатОтправкиСообщенияСотруднику = ВыполнитьОтправкуПисьма(ШаблонДляСотрудника, ДобавляемыеПолучатели, ПараметрыТекстаПисьма);

		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ШаблонДляОповещаемых) Тогда
			
			ДобавляемыеПолучатели = ПолучитьОповещаемыхОбОтпускеСотрудника(СтрокаТаблицы);
			
			Если ЗначениеЗаполнено(ДобавляемыеПолучатели) Тогда
				РезультатОтправкиСообщенияОповещаемым = ВыполнитьОтправкуПисьма(ШаблонДляОповещаемых, ДобавляемыеПолучатели, ПараметрыТекстаПисьма);
			КонецЕсли;	
			
		КонецЕсли;	
		
		ОтветственныйИсполнитель = ПолучитьОтветственногоИсполнителяПоОтпускуСотрудника(СтрокаТаблицы);
		
		Если ЗначениеЗаполнено(ОтветственныйИсполнитель) Тогда
			СтартоватьБизнесПроцесс(СтрокаТаблицы, ОтветственныйИсполнитель);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	ДатаЗавершенияВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах() + 4;
	
	ПараметрыРегистрации = СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Команды.Колонки.Идентификатор.Имя = "ИмяКоманды";
	ЭтаКоманда = ПараметрыРегистрации.Команды.Найти(ИмяКоманды, "ИмяКоманды");
	Если ЭтаКоманда = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Команда ""%1"" не поддерживается обработкой ""%2""'"),
			ИмяКоманды,
			Метаданные().Представление());
	КонецЕсли;
	
	Если ИмяКоманды = "РазослатьУведомления" Тогда
		ЗаполнитьДокументыДляРассылки();
		ВыполнитьРассылку();
	КонецЕсли;
	
	// Имитация длительной операции.
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < ДатаЗавершенияВМиллисекундах Цикл
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьОтправкуПисьма(ШаблонСообщения, Получатели, ЗаменяемыеПараметрыТекстаПисьма = Неопределено)
	
	Результат = Новый Структура("Отправлено, ОписаниеОшибки", Ложь);

	Сообщение = "заглушка";//ШаблоныСообщений.СформироватьСообщение(ШаблонСообщения, Неопределено, Новый УникальныйИдентификатор);

	ПараметрыПисьма = Новый Структура();
	ПараметрыПисьма.Вставить("Тема", Сообщение.Тема);
	
	ПараметрыПисьма.Вставить("Вложения", Новый Соответствие);
	Для каждого Вложение Из Сообщение.Вложения Цикл
		НовоеВложение = Новый Структура("ДвоичныеДанные, Идентификатор");
		НовоеВложение.ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
		НовоеВложение.Идентификатор = Вложение.Идентификатор;
		ПараметрыПисьма.Вложения.Вставить(Вложение.Представление, НовоеВложение);
	КонецЦикла;
	
	ПараметрыПисьма.Вставить("Кодировка", "utf-8");
	Если Сообщение.ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками;
	Иначе
		ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
	КонецЕсли;
	ПараметрыПисьма.Вставить("ТипТекста", ТипТекста);
	
	ТелоПисьма = Сообщение.Текст;

	Если ЗначениеЗаполнено(ЗаменяемыеПараметрыТекстаПисьма) Тогда
		
		Для Каждого ЗаменяемыйПараметрТекста Из ЗаменяемыеПараметрыТекстаПисьма Цикл
			ТелоПисьма = СтрЗаменить(ТелоПисьма, ЗаменяемыйПараметрТекста.Имя, ЗаменяемыйПараметрТекста.Значение);
		КонецЦикла;	
		
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	ПараметрыПисьма.Вставить("Кому", Получатели);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
		Если МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем() Тогда
			УчетнаяЗапись = МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
			МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
			Результат.Отправлено = Истина;
		Иначе
			Результат.ОписаниеОшибки  = НСтр("ru = 'Сообщение не может быть отправлено сразу.'");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции	

Функция ЗаполняемыеПараметрыТекста(Знач СтрокаТабличнойЧасти, ИменаРеквизитовТабличнойЧасти)
	
	МассивВозврата = Новый Массив;
	
	Для Каждого ИмяРеквизита Из ИменаРеквизитовТабличнойЧасти Цикл
		
		ЗначениеСтрокиТаблицы = СтрокаТабличнойЧасти[ИмяРеквизита];
		
		Если ТипЗнч(ЗначениеСтрокиТаблицы) = Тип("Дата") Тогда
			ЗначениеСтрокиТаблицы = Формат(ЗначениеСтрокиТаблицы, "ДФ=dd.MM.yyyy");
		КонецЕсли;	
		
		ИмяРеквизитаДляТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("[%1]", ИмяРеквизита);
		
		МассивВозврата.Добавить(Новый Структура("Имя, Значение", ИмяРеквизитаДляТекста, ЗначениеСтрокиТаблицы));
		
	КонецЦикла;	
	
	Возврат МассивВозврата;
	
КонецФункции	

// Возвращаемое значение:
//   Массив  - массив структур с ключами "Адрес, Представление".
//
Функция ПолучитьОповещаемыхОбОтпускеСотрудника(Знач СтрокаТабличнойЧасти)
	
	 АдресаОповещаемых = Новый Массив;
	 //АдресаОповещаемых.Добавить(Новый Структура("Адрес, Представление", "vladimir.v.harin@gmail.com", ""));
	 
	 Возврат АдресаОповещаемых;
	
КонецФункции	

// Возвращаемое значение:
//   СправочникСсылка.Пользователи  - ответственный пользователь.
//
Функция ПолучитьОтветственногоИсполнителяПоОтпускуСотрудника(Знач СтрокаТабличнойЧасти)

	//Возврат Пользователи.ТекущийПользователь();
	Возврат Неопределено;
	
КонецФункции 

Процедура СтартоватьБизнесПроцесс(СтрокаТаблицы, Исполнитель)
	
	ТекстСодержания = "%1 (%2, %3) по графику уходит в отпуск с %4 по %5";
	ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания, 
																				СтрокаТаблицы.Сотрудник,
																				СтрокаТаблицы.Подразделение,
																				СтрокаТаблицы.Должность,
																				Формат(СтрокаТаблицы.ДатаНачалаОтпуска, "ДФ=dd.MM.yyyy"),
																				Формат(СтрокаТаблицы.ДатаОкончанияОтпуска, "ДФ=dd.MM.yyyy"));
	
	НовыйБП = БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
	НовыйБП.Дата 					= ТекущаяДата();
	НовыйБП.Предмет 				= СтрокаТаблицы.ДокументПланированияОтпуска;
	НовыйБП.Наименование 			= "Оформить отпуск по сотруднику "+СтрокаТаблицы.Сотрудник;
	НовыйБП.Исполнитель             = Исполнитель;
	НовыйБП.СрокИсполнения			= ТекущаяДата()+3600*24;
	НовыйБП.Содержание				= ТекстСодержания;
	НовыйБП.Записать();
	НовыйБП.Старт(БизнесПроцессы.Задание.ТочкиМаршрута.Старт);
	
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли